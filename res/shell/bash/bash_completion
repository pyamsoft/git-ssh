# The GPLv2 License
#
#   Copyright (C) 2017  Peter Kenji Yamanaka
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License along
#   with this program; if not, write to the Free Software Foundation, Inc.,
#   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

__fallback()
{
  # If its not a command we know how to do... what should we do?
  # For now I guess we fall back to the bash_completion default
  # of listing out files and directories.
  _filedir
}

_git_ssh()
{
  local cur
  local prev
  cur="${COMP_WORDS[COMP_CWORD]}"
  prev="${COMP_WORDS[COMP_CWORD-1]}"

  local git_options
  local git_ssh_options
  git_options="$(git --list-cmds=builtins 2>/dev/null || echo 'add am apply archive bisect blame branch bundle checkout cherry cherry-pick citool clean clone commit config describe diff difftool fetch format-patch fsck gc gitk grep gui help init instaweb log merge mergetool mv notes pull push range-diff rebase reflog remote repack replace request-pull reset revert rm send-email shortlog show show-branch ssh stage stash status submodule tag whatchanged worktree')"
  git_ssh_options="\
    --ssh \
    --create-config \
    --remove-config \
    --list-configs \
    --ssh-opts \
    --git-path \
    --ssh-help \
    --ssh-version \
    --ssh-debug"

  local git_ssh_configs
  local git_config_dir
  git_config_dir="${XDG_CONFIG_HOME:-${HOME}/.config}/git-ssh"
  if [ -d "${git_config_dir}" ]; then
    git_ssh_configs="$(find "${git_config_dir}" \
      -name '*.2' \
      -exec basename {} '.2' \;)"
  else
    git_ssh_configs=""
  fi

  case "${cur}" in
    # Suggest git-ssh options
    --*)
      # shellcheck disable=SC2207
      COMPREPLY=( $(compgen -W "${git_ssh_options}" -- "${cur}") )
      ;;
    *)
      # If the command held by $prev is either 'git-ssh' or 'git ssh'
      # we can at least complete all of the various git commands
      #
      # Otherwise, we can't do anything so fall back to the default.
      case "${prev}" in
        --ssh-help|--ssh-version|--list-configs)
          # These are exiting options, don't suggest anything else since
          # it will not take effect
          ;;
        --ssh|--remove-config)
          # Complete if we have configs
          if [ -n "${git_ssh_configs}" ]; then
            # shellcheck disable=SC2207
            COMPREPLY=( $(compgen -W "${git_ssh_configs}" -- "${cur}") )
          else
            __fallback
          fi
          ;;
        *)
          local using_git
          using_git=0
          for cmd in ${git_options}; do
            if [ "${prev}" = "${cmd}" ]; then
              using_git=1
              break
            fi
          done

          # If we are using git, don't suggest git commands
          if [ "${using_git}" -eq 1 ]; then
          __fallback
          else
            # Otherwise suggest git commands
            # shellcheck disable=SC2207
            COMPREPLY=( $(compgen -W "${git_options}" -- "${cur}") )
          fi
          ;;
      esac
      ;;
  esac
}

complete -F _git_ssh git-ssh
