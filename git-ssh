#!/bin/sh

#  Copyright (C) 2023  pyamsoft
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software Foundation, Inc.,
#  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
#

# Export the LC as the default C so that we do not run into locale based quirks
LC_ALL=C
export LC_ALL

readonly APP_NAME="git-ssh"
readonly VERSION="3.0.0"
readonly CONFIG_VERSION=2

# Where our configs live
readonly CONFIG_DIR="${XDG_CONFIG_HOME:-${HOME}/.config}/${APP_NAME}"

##
# Log
#
# We log to stderr to avoid polluting a shell in $(eval) mode
#
# $@ messages
##
log() {
  printf -- '%s\n' "$*" 1>&2
}

##
# Print help
##
print_usage() {
  print_version || return 1
  log "$(
    cat <<EOF

[Environment]
CONFIG_DIR=${CONFIG_DIR}
CONFIG_VERSION=${CONFIG_VERSION}

[Commands]
export <config>             Export a config into the environment as GIT_SSH_COMMAND
list                        List all configs in CONFIG_DIR
create <config> <path>      Create a new <config> pointing to file name <path>
delete <config>             Delete a <config>
help | -h | --help          This help
version | -v | --version    Display application version
EOF
  )"
  return 0
}

##
# List configs
##
list_configs() {
  for config in "${CONFIG_DIR}"/*."${CONFIG_VERSION}"; do
    log
    log "Config: $(basename "${config}") [${config}]"
    log '=================='
    log "$(cat "${config}")"
  done
  return 0
}

##
# Create a new config
#
# $1 config name
# $2 ssh key path
##
create_config() {
  create_config__name="$1"
  create_config__path="$2"

  if [ -z "${create_config__name}" ]; then
    log "Missing ${APP_NAME} config name, cannot create."
    return 1
  fi

  if [ -z "${create_config__path}" ]; then
    log "Missing ${APP_NAME} config path, cannot create."
    return 1
  fi

  # Use the absolute path
  create_config__path="$(realpath "${create_config__path}")"
  if [ ! -e "${create_config__path}" ]; then
    log "ssh keyfile does not exist at path: '${create_config__path}', cannot create config"
    return 1
  fi

  if [ ! -r "${create_config__path}" ]; then
    log "ssh keyfile is not readable at path: '${create_config__path}', cannot create config"
    return 1
  fi

  create_config__file="${CONFIG_DIR}/${create_config__name}.${CONFIG_VERSION}"
  if [ -e "${create_config__file}" ]; then
    log "Config already exists at ${create_config__file}."
    return 1
  fi

  printf -- '%s\n' "$(
    cat <<EOF
# Created by ${APP_NAME} ${VERSION}
#
# You may modify this file, but it may be overwritten without warning by
# ${APP_NAME} if you tell it to do so.

Host *
    IdentityFile ${create_config__path}
    IdentitiesOnly yes
    AddKeysToAgent yes

    ##
    # Use git with SSH over an HTTP proxy
    #
    # You must have the "socat" command installed
    #
    # Replace <server ip address> with your server IP address
    # Replace <port> with your port
    #
    # For more info: https://gist.github.com/ozbillwang/005bd1dfc597a2f3a00148834ad3e551
    ##
    # ProxyCommand /usr/bin/socat STDIO PROXY:<hostname>:%h:%p,proxyport=<port> 
EOF
  )" >"${create_config__file}" || return 1
  log "Created new ${APP_NAME} config ${create_config__name} at ${create_config__file}"

  unset create_config__name
  unset create_config__path
  unset create_config__file
  return 0
}

##
# Delete an existing config
#
# $1 config name
##
delete_config() {
  delete_config__name="$1"

  if [ -z "${delete_config__name}" ]; then
    log "Missing ${APP_NAME} config name, cannot delete."
    return 1
  fi

  delete_config__file="${CONFIG_DIR}/${delete_config__name}.${CONFIG_VERSION}"
  if [ ! -e "${delete_config__file}" ]; then
    log "Config for ${delete_config__name} does not exist at ${delete_config__file}"
    return 1
  fi

  rm -f "${delete_config__file}" || return 1
  log "Deleted ${APP_NAME} config ${delete_config__name} at ${delete_config__file}"

  unset delete_config__name
  unset delete_config__file
  return 0
}

##
# Output an environment for a config
#
# $1 config name
##
export_config() {
  export_config__name="$1"

  if [ -z "${export_config__name}" ]; then
    log "Missing ${APP_NAME} config name, cannot export."
    return 1
  fi

  export_config__file="${CONFIG_DIR}/${export_config__name}.${CONFIG_VERSION}"
  if [ ! -e "${export_config__file}" ]; then
    log "Missing ${APP_NAME} config at: ${export_config__file}"
    return 1
  fi

  if [ ! -r "${export_config__file}" ]; then
    log "Could not read ${APP_NAME} config at: ${export_config__file}"
    return 1
  fi

  # Output the environment
  export_config__env="export GIT_SSH_COMMAND='ssh -F \"${export_config__file}\"'"
  printf -- '%s\n' "${export_config__env}"

  unset export_config__env
  unset export_config__file
  unset export_config__name

  return 0
}

print_version() {
  log "${APP_NAME} [${VERSION}]"
  return 0
}

main() {
  mkdir -p "${CONFIG_DIR}" || {
    log "Unable to make config directory at: ${CONFIG_DIR}"
    return 1
  }

  # Commands
  main__command="$1"
  main__config="$2"
  main__file_path="$3"

  if [ -z "${main__command}" ]; then
    print_usage || return 1
    return 0
  fi

  case "${main__command}" in
  help | -h | --help)
    print_usage || return 1
    ;;
  version | -v | --version)
    print_version || return 1
    ;;
  list)
    list_configs || return 1
    ;;
  export)
    export_config "${main__config}" || return 1
    ;;
  create)
    create_config "${main__config}" "${main__file_path}" || return 1
    ;;
  delete)
    delete_config "${main__config}" || return 1
    ;;
  *)
    print_usage || return 1
    return 1
    ;;
  esac
  return 0
}

main "$@" || exit 1
exit 0
